{
	"info": {
		"_postman_id": "auth-collection-id",
		"name": "Messaging App - Authentication Tests",
		"description": "Complete authentication flow testing including JWT token management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Response has user data', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('user');",
							"    pm.expect(jsonData.user).to.have.property('id');",
							"    pm.expect(jsonData.user).to.have.property('username');",
							"    pm.expect(jsonData.user).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"testpassword123\",\n    \"password_confirm\": \"testpassword123\",\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/register/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"register",
						""
					]
				}
			}
		},
		{
			"name": "User Login (JWT Token)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has tokens', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access');",
							"    pm.expect(jsonData).to.have.property('refresh');",
							"    pm.expect(jsonData).to.have.property('user');",
							"    ",
							"    // Store tokens in environment variables",
							"    pm.environment.set('access_token', jsonData.access);",
							"    pm.environment.set('refresh_token', jsonData.refresh);",
							"    pm.environment.set('user_id', jsonData.user.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testuser\",\n    \"password\": \"testpassword123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login",
						""
					]
				}
			}
		},
		{
			"name": "Get User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has user profile', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('email');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/profile/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"profile",
						""
					]
				}
			}
		},
		{
			"name": "Update User Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Profile updated successfully', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('user');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Updated Test\",\n    \"last_name\": \"User Updated\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/profile/update/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"profile",
						"update",
						""
					]
				}
			}
		},
		{
			"name": "Refresh JWT Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('New access token received', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('access');",
							"    ",
							"    // Update access token",
							"    pm.environment.set('access_token', jsonData.access);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"refresh\": \"{{refresh_token}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/refresh/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"refresh",
						""
					]
				}
			}
		},
		{
			"name": "User Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Logout successful', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    ",
							"    // Clear tokens from environment",
							"    pm.environment.set('access_token', '');",
							"    pm.environment.set('refresh_token', '');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/auth/logout/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"logout",
						""
					]
				}
			}
		}
	]
}