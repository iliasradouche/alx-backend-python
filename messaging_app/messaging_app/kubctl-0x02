#!/bin/bash

# kubctl-0x02: Blue-Green Deployment Management Script
# This script manages blue-green deployments for the Django messaging app
# Author: ALX Backend Python Course
# Version: 1.0

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
NAMESPACE="default"
BLUE_DEPLOYMENT="django-messaging-app-blue"
GREEN_DEPLOYMENT="django-messaging-app-green"
MAIN_SERVICE="django-messaging-service"
TIMEOUT=300  # 5 minutes timeout

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if kubectl is installed
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    # Check if cluster is accessible
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    # Check if required files exist
    local files=("blue_deployment.yaml" "green_deployment.yaml" "kubeservice.yaml")
    for file in "${files[@]}"; do
        if [[ ! -f "$file" ]]; then
            print_error "Required file $file not found"
            exit 1
        fi
    done
    
    print_success "Prerequisites check passed"
}

# Function to deploy blue version
deploy_blue() {
    print_status "Deploying blue version..."
    
    if kubectl apply -f blue_deployment.yaml; then
        print_success "Blue deployment applied successfully"
    else
        print_error "Failed to apply blue deployment"
        return 1
    fi
    
    # Wait for blue deployment to be ready
    print_status "Waiting for blue deployment to be ready..."
    if kubectl wait --for=condition=available --timeout=${TIMEOUT}s deployment/$BLUE_DEPLOYMENT -n $NAMESPACE; then
        print_success "Blue deployment is ready"
    else
        print_error "Blue deployment failed to become ready within timeout"
        return 1
    fi
}

# Function to deploy green version
deploy_green() {
    print_status "Deploying green version..."
    
    if kubectl apply -f green_deployment.yaml; then
        print_success "Green deployment applied successfully"
    else
        print_error "Failed to apply green deployment"
        return 1
    fi
    
    # Wait for green deployment to be ready
    print_status "Waiting for green deployment to be ready..."
    if kubectl wait --for=condition=available --timeout=${TIMEOUT}s deployment/$GREEN_DEPLOYMENT -n $NAMESPACE; then
        print_success "Green deployment is ready"
    else
        print_error "Green deployment failed to become ready within timeout"
        return 1
    fi
}

# Function to apply services
apply_services() {
    print_status "Applying service configurations..."
    
    if kubectl apply -f kubeservice.yaml; then
        print_success "Service configurations applied successfully"
    else
        print_error "Failed to apply service configurations"
        return 1
    fi
}

# Function to check logs for errors
check_logs() {
    local deployment=$1
    local version=$2
    
    print_status "Checking logs for $version version..."
    
    # Get pods for the deployment
    local pods=$(kubectl get pods -l app=$deployment -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')
    
    if [[ -z "$pods" ]]; then
        print_warning "No pods found for $deployment"
        return 1
    fi
    
    local error_found=false
    
    for pod in $pods; do
        print_status "Checking logs for pod: $pod"
        
        # Check for errors in logs (last 50 lines)
        local logs=$(kubectl logs $pod -n $NAMESPACE --tail=50 2>/dev/null || echo "")
        
        if echo "$logs" | grep -i -E "(error|exception|failed|traceback)" > /dev/null; then
            print_error "Errors found in $pod logs:"
            echo "$logs" | grep -i -E "(error|exception|failed|traceback)" | head -10
            error_found=true
        else
            print_success "No errors found in $pod logs"
        fi
    done
    
    if $error_found; then
        return 1
    else
        return 0
    fi
}

# Function to get deployment status
get_deployment_status() {
    print_status "Current deployment status:"
    echo
    kubectl get deployments -n $NAMESPACE -l 'version in (blue,green)' -o wide
    echo
    kubectl get pods -n $NAMESPACE -l 'version in (blue,green)' -o wide
    echo
    kubectl get services -n $NAMESPACE -l 'app=django-messaging-app'
}

# Function to switch traffic to green
switch_to_green() {
    print_status "Switching traffic from blue to green..."
    
    # Update main service to point to green deployment
    if kubectl patch service $MAIN_SERVICE -n $NAMESPACE -p '{"spec":{"selector":{"app":"django-messaging-app-green","version":"green"}}}'; then
        print_success "Traffic switched to green deployment"
    else
        print_error "Failed to switch traffic to green deployment"
        return 1
    fi
}

# Function to switch traffic to blue
switch_to_blue() {
    print_status "Switching traffic from green to blue..."
    
    # Update main service to point to blue deployment
    if kubectl patch service $MAIN_SERVICE -n $NAMESPACE -p '{"spec":{"selector":{"app":"django-messaging-app-blue","version":"blue"}}}'; then
        print_success "Traffic switched to blue deployment"
    else
        print_error "Failed to switch traffic to blue deployment"
        return 1
    fi
}

# Function to cleanup green deployment
cleanup_green() {
    print_status "Cleaning up green deployment..."
    
    if kubectl delete deployment $GREEN_DEPLOYMENT -n $NAMESPACE --ignore-not-found=true; then
        print_success "Green deployment cleaned up"
    else
        print_warning "Failed to cleanup green deployment"
    fi
}

# Function to show help
show_help() {
    cat << EOF
kubctl-0x02: Blue-Green Deployment Management Script

USAGE:
    ./kubctl-0x02 [COMMAND] [OPTIONS]

COMMANDS:
    deploy-blue     Deploy blue version only
    deploy-green    Deploy green version only
    deploy-both     Deploy both blue and green versions
    switch-green    Switch traffic to green deployment
    switch-blue     Switch traffic to blue deployment
    check-logs      Check logs for both deployments
    status          Show deployment status
    full-deploy     Full blue-green deployment process
    cleanup         Cleanup green deployment
    help            Show this help message

OPTIONS:
    --namespace     Kubernetes namespace (default: default)
    --timeout       Timeout in seconds (default: 300)

EXAMPLES:
    ./kubctl-0x02 full-deploy
    ./kubctl-0x02 deploy-green
    ./kubctl-0x02 switch-green
    ./kubctl-0x02 status
    ./kubctl-0x02 check-logs

EOF
}

# Main function for full blue-green deployment
full_deployment() {
    print_status "Starting full blue-green deployment process..."
    
    # Step 1: Check prerequisites
    check_prerequisites
    
    # Step 2: Deploy blue version
    if ! deploy_blue; then
        print_error "Blue deployment failed"
        exit 1
    fi
    
    # Step 3: Apply services
    if ! apply_services; then
        print_error "Service application failed"
        exit 1
    fi
    
    # Step 4: Check blue logs
    if ! check_logs "$BLUE_DEPLOYMENT" "blue"; then
        print_warning "Errors found in blue deployment logs"
    fi
    
    # Step 5: Deploy green version
    if ! deploy_green; then
        print_error "Green deployment failed"
        exit 1
    fi
    
    # Step 6: Check green logs
    if ! check_logs "$GREEN_DEPLOYMENT" "green"; then
        print_error "Errors found in green deployment logs"
        print_status "Keeping traffic on blue deployment due to green deployment errors"
        get_deployment_status
        exit 1
    fi
    
    # Step 7: Switch traffic to green if no errors
    print_status "Green deployment is healthy, switching traffic..."
    if ! switch_to_green; then
        print_error "Failed to switch traffic to green"
        exit 1
    fi
    
    # Step 8: Final status
    print_success "Blue-green deployment completed successfully!"
    get_deployment_status
}

# Parse command line arguments
case "${1:-help}" in
    "deploy-blue")
        check_prerequisites
        deploy_blue
        ;;
    "deploy-green")
        check_prerequisites
        deploy_green
        ;;
    "deploy-both")
        check_prerequisites
        deploy_blue
        apply_services
        deploy_green
        ;;
    "switch-green")
        switch_to_green
        ;;
    "switch-blue")
        switch_to_blue
        ;;
    "check-logs")
        check_logs "$BLUE_DEPLOYMENT" "blue"
        check_logs "$GREEN_DEPLOYMENT" "green"
        ;;
    "status")
        get_deployment_status
        ;;
    "full-deploy")
        full_deployment
        ;;
    "cleanup")
        cleanup_green
        ;;
    "help"|"--help"|"-h")
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac