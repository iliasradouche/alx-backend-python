name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: messaging_app_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd messaging_app
        pip install -r requirements.txt
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -prootpassword --silent; do
          sleep 1
        done
    
    - name: Set up test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "CREATE DATABASE IF NOT EXISTS messaging_app_test;"
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword -e "GRANT ALL PRIVILEGES ON messaging_app_test.* TO 'testuser'@'%';"
    
    - name: Run linting with flake8
      run: |
        cd messaging_app
        # First check for critical errors that should always fail the build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Then run full linting check - fail build if any errors are found
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run migrations
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/messaging_app_test
        DJANGO_SETTINGS_MODULE: messaging_app.settings
      run: |
        cd messaging_app
        python manage.py makemigrations
        python manage.py migrate
    
    - name: Run tests with coverage
      env:
        DATABASE_URL: mysql://testuser:testpassword@127.0.0.1:3306/messaging_app_test
        DJANGO_SETTINGS_MODULE: messaging_app.settings
      run: |
        cd messaging_app
        # Run tests with coverage collection
        coverage run --source='.' -m pytest --junitxml=test-results.xml -v
        # Generate coverage reports in multiple formats
        coverage xml -o coverage.xml
        coverage html -d coverage_html
        coverage report --show-missing
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: messaging_app/test-results.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports
        path: |
          messaging_app/coverage.xml
          messaging_app/coverage_html/
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERAGE_FILE: messaging_app/coverage.xml

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./messaging_app
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/messaging-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max