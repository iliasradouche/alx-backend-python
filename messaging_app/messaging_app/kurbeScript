#!/bin/bash

# kurbeScript - Kubernetes Local Cluster Management Script
# This script sets up and manages a local Kubernetes cluster using minikube

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check minikube installation
check_minikube() {
    print_status "Checking minikube installation..."
    
    if command_exists minikube; then
        MINIKUBE_VERSION=$(minikube version --short 2>/dev/null || echo "unknown")
        print_success "minikube is installed (version: $MINIKUBE_VERSION)"
        return 0
    else
        print_error "minikube is not installed!"
        print_status "Please install minikube from: https://minikube.sigs.k8s.io/docs/start/"
        
        # Provide installation instructions based on OS
        if [[ "$OSTYPE" == "linux-gnu"* ]]; then
            print_status "For Linux: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64"
            print_status "           sudo install minikube-linux-amd64 /usr/local/bin/minikube"
        elif [[ "$OSTYPE" == "darwin"* ]]; then
            print_status "For macOS: brew install minikube"
        elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]]; then
            print_status "For Windows: Download from https://github.com/kubernetes/minikube/releases/latest"
        fi
        
        return 1
    fi
}

# Function to check kubectl installation
check_kubectl() {
    print_status "Checking kubectl installation..."
    
    if command_exists kubectl; then
        KUBECTL_VERSION=$(kubectl version --client --short 2>/dev/null | cut -d' ' -f3 || echo "unknown")
        print_success "kubectl is installed (version: $KUBECTL_VERSION)"
        return 0
    else
        print_error "kubectl is not installed!"
        print_status "kubectl will be installed automatically with minikube, or install separately from: https://kubernetes.io/docs/tasks/tools/"
        return 1
    fi
}

# Function to start minikube cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with minikube..."
    
    # Check if minikube is already running
    if minikube status >/dev/null 2>&1; then
        print_warning "minikube cluster is already running"
        minikube status
    else
        print_status "Starting new minikube cluster..."
        # Start minikube with some basic configuration
        minikube start --driver=docker --cpus=2 --memory=2048mb --disk-size=10gb
        
        if [ $? -eq 0 ]; then
            print_success "Kubernetes cluster started successfully!"
        else
            print_error "Failed to start Kubernetes cluster"
            return 1
        fi
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying cluster status with kubectl cluster-info..."
    
    # Wait a moment for cluster to be fully ready
    sleep 5
    
    if kubectl cluster-info >/dev/null 2>&1; then
        print_success "Cluster is running and accessible!"
        echo ""
        print_status "Cluster Information:"
        kubectl cluster-info
        echo ""
        
        # Additional cluster status
        print_status "Node Status:"
        kubectl get nodes
        echo ""
        
        return 0
    else
        print_error "Cluster verification failed!"
        print_status "Trying to diagnose the issue..."
        minikube status
        return 1
    fi
}

# Function to retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    # Get pods from all namespaces
    echo ""
    print_status "Pods in all namespaces:"
    kubectl get pods --all-namespaces
    
    echo ""
    print_status "Pods in default namespace:"
    kubectl get pods
    
    # Show pod count
    POD_COUNT=$(kubectl get pods --all-namespaces --no-headers | wc -l)
    print_success "Total pods found: $POD_COUNT"
}

# Function to show cluster dashboard info
show_dashboard_info() {
    print_status "Kubernetes Dashboard Information:"
    print_status "To access the Kubernetes dashboard, run: minikube dashboard"
    print_status "To get the dashboard URL, run: minikube dashboard --url"
}

# Function to show useful commands
show_useful_commands() {
    echo ""
    print_status "Useful commands for managing your cluster:"
    echo "  minikube status          - Check cluster status"
    echo "  minikube stop            - Stop the cluster"
    echo "  minikube delete          - Delete the cluster"
    echo "  minikube dashboard       - Open Kubernetes dashboard"
    echo "  kubectl get nodes        - List cluster nodes"
    echo "  kubectl get pods         - List pods in default namespace"
    echo "  kubectl get services     - List services"
    echo "  kubectl get deployments - List deployments"
}

# Main execution
main() {
    echo "======================================"
    echo "    Kubernetes Local Setup Script    "
    echo "======================================"
    echo ""
    
    # Step 1: Check prerequisites
    if ! check_minikube; then
        exit 1
    fi
    
    check_kubectl
    echo ""
    
    # Step 2: Start the cluster
    if ! start_cluster; then
        exit 1
    fi
    echo ""
    
    # Step 3: Verify the cluster
    if ! verify_cluster; then
        exit 1
    fi
    
    # Step 4: Get available pods
    get_pods
    echo ""
    
    # Step 5: Show additional information
    show_dashboard_info
    show_useful_commands
    
    echo ""
    print_success "Kubernetes cluster setup completed successfully!"
    echo "======================================"
}

# Run main function
main "$@"