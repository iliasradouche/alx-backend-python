pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.10'
        DJANGO_SETTINGS_MODULE = 'messaging_app.settings'
        DATABASE_URL = 'sqlite:///db.sqlite3'
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKER_IMAGE_NAME = 'your-dockerhub-username/messaging-app'
        DOCKER_IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                checkout scm
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running code linting with flake8...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
                '''
            }
        }
        
        stage('Run Database Migrations') {
            steps {
                echo 'Running Django database migrations...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    python manage.py makemigrations
                    python manage.py migrate
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    . venv/bin/activate
                    cd messaging_app
                    coverage run --source='.' -m pytest --junitxml=test-results.xml -v
                    coverage xml -o coverage.xml
                    coverage report
                '''
            }
        }
        
        stage('Generate Test Report') {
            steps {
                echo 'Publishing test results and coverage reports...'
                publishTestResults testResultsPattern: 'messaging_app/test-results.xml'
                publishCoverage adapters: [coberturaAdapter('messaging_app/coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    dir('messaging_app') {
                        def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                        dockerImage.tag("${DOCKER_IMAGE_NAME}:latest")
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        def dockerImage = docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                        dockerImage.push()
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}